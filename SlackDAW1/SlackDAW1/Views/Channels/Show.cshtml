@model SlackDAW1.Models.Channel

@{
	ViewBag.Title = "Show";
}
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<style>

	.channel {
		padding: 20px;
		width: 100%;
	}

	.channel-header {
		display: flex;
		flex-direction: row;
		align-items: start;
		justify-content: space-between;
		width: 100 %;
		height: 100 %;
		margin: 0 auto;
		background-color: #31304d;
		margin-bottom: 20px;
		margin: 0;
		color: #161a30;
		border-bottom: 2px solid #31304d;
		padding: 10px;
	}

	.channel-title h2 {
		font-size: 1.5rem;
		font-weight: 600;
		color: #fff;
		margin: 0;
		padding: 0;
	}

	.channel-header > p {
		font-size: 0.75rem;
		font-weight: 800;
		color: #85858d;
		padding: 5px 10px;
		background-color: rgb(189, 172, 88);
		border-radius: 5px;
	}

	.show-channel {
		display: flex;
		flex-direction: row;
		align-items: start;
		justify-content: center;
		width: 100 %;
		height: 100 %;
		margin: 0 auto;
	}

	.messages-wrapper {
		display: flex;
		flex-direction: column;
		align-items: start;
		justify-content: space-around;
		width: 70%;
		height: 100%;
		margin: 0 auto;
		margin-bottom: 20px;
		margin: 0;
		border: 2px solid #31304d;
		overflow-y: hidden;
	}

	.messages {
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		align-content: start;
		height: 60vh;
		overflow-y: scroll;
		padding: 0;
	}

		.messages::-webkit-scrollbar {
			width: 0px;
			background: transparent;
		}

		.messages::-webkit-scrollbar-thumb {
			background: transparent;
		}

	.message-wrapper {
		width: 100%;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		padding: 10px;
		margin: 0;
	}

	.message:hover, .message-wrapper a:hover > .message-wrapper{
			border-bottom: 2px solid #31304d;
	}

	.message-wrapper a {
		text-decoration: none;
		color: #aaaa;
	}

	.message-wrapper a:hover {
		color: #fff;
	}

	.message-action {
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		gap: 10px;
	}

	.message-action form {
		border: none;
		margin: 0;
		padding: 0;
		display: flex;
		flex-direction: row;
		boc-sizing: border-box;
		width: auto;
		flex-direction: row;
	}

		.message-action form input[type="submit"] {
			height: 100%;
			padding: 5px;
			background-color: #dd3333;
			color: #fff;
			border: none;
			text-decoration: none;
			margin: 0px 5px;
		}

			.message-action form input[type="submit"]:hover {
				background-color: #ff0000;
				color: #605b5b;
			}

		.message-action form a {
			height: 100%;
			padding: 5px;
			background-color: #1643ff;
			color: #fff;
			border: none;
			text-decoration: none;
			margin: 0px 5px;
		}

			.message-action form a:hover {
				background-color: #5954ed;

	}

	.message {
		display: flex;
		flex-direction: row;
		justify-content: start;
		align-items: center;
		color: #ffffff;
		margin: 0;
		width: 100%;
		height: 100%;
	}

		.message * {
			margin: 0;
			padding: 0;
		}

		.message span {
			font-size: 0.75rem;
			font-weight: 100;
			color: #676767;
			margin-left: 10px;
		}

		.message p:first-child {
			font-weight: 400;
			color: #676767;
		}

		.message p:last-child {
			font-weight: 600;
			color: #fff;
		}



	form {
		width: 100%;
		padding: 10px;
		margin: 0;
		border: 1px solid #31304d;
	}

		form * {
			margin: 0;
			padding: 0;
		}

	.new-message {
		width: 100%;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		gap: 20px;
	}

	#Body {
		width: 100%;
		height: 100%;
		padding: 5px;
		border-radius: 12px;
		border: nonde;
	}

	input[type="submit"] {
		height: 100%;
		padding: 5px;
	}

	.users-in-channel-wrapper {
		width: 30%;
		height: 65vh;
		padding: 20px;
		display: flex;
		flex-direction: column;
		align-items: start;
		justify-content: space-between;
	}

	.user-info {
		display: flex;
		flex-direction: column;
		align-items: start;
		justify-content: start;
		padding: 10px 20px;
		border: 1px solid #31304d;
	}

		.user-info * {
			margin: 10px 0px;
			padding: 0;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: center;
			flex-wrap: wrap;
		}

		.user-info span {
			font-size: 0.75rem;
			font-weight: 100;
			color: #fff;
			margin-left: 10px;
			background-color: #dd3333;
			padding: 5px;
			border-radius: 5px;
		}

	.user-info-buttons {
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: start;
		gap: 5px;
		width: 100%;
	}

		.user-info-buttons form {
			border: none;
			margin: 0;
			padding: 0;
			display: flex;
			flex-direction: row;
			boc-sizing: border-box;
			width: auto;
			flex-direction: row;
		}

	#remove-button {
		padding: 5px;
		background-color: #dd3333;
		color: #fff;
		border: none;
		text-decoration: none;
		margin: 0px 5px;
	}

		#remove-button:hover {
			background-color: #ff0000;
			color: #605b5b;
		}

	#promote-button {
		padding: 5px;
		background-color: #1643ff;
		color: #fff;
		border: none;
		text-decoration: none;
		margin: 0px 5px;
	}

		#promote-button:hover {
			background-color: #5954ed;
		}

	#you-identifier {
		background-color: #5954ed;
	}

	.add-users {
		margin: 20px 0px;
	}

	.add-users-button {
		height: 32px;
		background-color: #5954ed;
		color: #fff;
		border: none;
		text-decoration: none;
		padding: 10px 20px;
		width: 200px;
	}

	.leave-channel form {
		border: none;
		margin: 20px;
		padding: 0;
		display: flex;
		flex-direction: row;
		boc-sizing: border-box;
		width: 100%;
		height: 32px;
		flex-direction: row;
	}

	.leave-channel-button {
		height: 32px;
		background-color: #dd3333;
		color: #fff;
		border: none;
		text-decoration: none;
		padding: 10px 20px;
		width: 200px;
	}

	.user-actions {
		width: 100%;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-around;
	}
</style>

<script>

	function scrollToBottom() {
		var messagesContainer = document.getElementById('messagesContainer');
		messagesContainer.scrollTop = messagesContainer.scrollHeight;
	}

	document.addEventListener('DOMContentLoaded', function () {
		scrollToBottom();
	});
</script>

<div class="channel">

	<div class="channel-header">
		<div class='channel-title'>
			<h2>@Model.ChannelName</h2>
			<p>@Model.ChannelDescription</p>
		</div>
		<p>#@Model.Category.CategoryName</p>
	</div>



	<div class="show-channel">

		<div class="messages-wrapper">
			<div class="messages" id='messagesContainer'>
				@if (ViewBag.Messages != null || ViewBag.Messages.count > 0)
				{
					foreach (var message in ViewBag.Messages)
					{
						<div class="message-wrapper">
							<div class="message">
								<p>@message.Sender.UserName: &nbsp;</p>
								<p>@message.Body</p>
								<span>@message.Timestamp</span>
							</div>

							@if (ViewBag.IsUserModerator || message.Sender.Id == UserManager.GetUserId(User))
							{
								<div class="message-action">
									<a href="/Messages/Edit/@message.MessageID">Edit</a>
									@using (Html.BeginForm(actionName: "Delete", controllerName: "Messages", method: FormMethod.Post))
									{
										<input type="hidden" name="MessageID" value="@message.MessageID" />
										<input type="submit" value="Delete" />
									}
								</div>
							}
						</div>
					}
				}
				else
				{
					<p>No messages.</p>
					<button><a href="/Messages/Index">Reload</a></button>
				}
			</div>
			@using (Html.BeginForm(actionName: "New", controllerName: "Messages", method: FormMethod.Post, routeValues: new { param = Model.ChannelID }))
			{
				<div class="new-message">

					<input type="hidden" name="ChannelID" value="@Model.ChannelID" />
					<input type="text" name="Body" id="Body" />
					<input type="submit" value="Send" />
					<br />
				</div>
			}
		</div>

		<div class="users-in-channel-wrapper">
			<div class="users-in-channel">
				<p>Users in channel:</p>
				@if (ViewBag.UsersWithModeratorStatus != null)
				{
					foreach (var userWithModeratorStatus in ViewBag.UsersWithModeratorStatus)
					{
						<div class="user-info-wrapper">


							<div class="user-info">
								<p>
									@userWithModeratorStatus.User.UserName
									@if (userWithModeratorStatus.IsModerator)
									{
										<span>Moderator</span>
									}

									@if (SignInManager.IsSignedIn(User))
									{
										if (UserManager.GetUserId(User) == userWithModeratorStatus.User.Id)
										{
											<span id='you-identifier'>You</span>
										}
									}
								</p>

								<div class="user-info-buttons">
									@if (ViewBag.IsUserModerator && userWithModeratorStatus.User.Id != UserManager.GetUserId(User))
									{
										@using (Html.BeginForm(actionName: "RemoveUserFromChannel", controllerName: "Users", method: FormMethod.Post, routeValues: new { param = Model.ChannelID }))
										{
											<input type="hidden" name="UserID" value="@userWithModeratorStatus.User.Id" />
											<input type="hidden" name="ChannelID" value="@Model.ChannelID" />
											<input type="submit" value="Remove" id="remove-button" />
										}

										@if (userWithModeratorStatus.IsModerator == false)
										{
											@using (Html.BeginForm(actionName: "PromoteUserOnChannel", controllerName: "Users", method: FormMethod.Post, routeValues: new { param = Model.ChannelID }))
											{
												<input type="hidden" name="UserID" value="@userWithModeratorStatus.User.Id" />
												<input type="hidden" name="ChannelID" value="@Model.ChannelID" />
												<input type="submit" value="Promote" id="promote-button" />
											}
										} else {
											@using (Html.BeginForm(actionName: "DemoteUserOnChannel", controllerName: "Users", method: FormMethod.Post, routeValues: new { param = Model.ChannelID }))
											{
												<input type="hidden" name="UserID" value="@userWithModeratorStatus.User.Id" />
												<input type="hidden" name="ChannelID" value="@Model.ChannelID" />
												<input type="submit" value="Demote" id="promote-button" />
											}
										}
									}
								</div>
							</div>
						</div>
					}
				}
				else
				{
					<p>Error: Couldn't fetch any users.</p>
					<button><a href="/Users/Index/">Reload</a></button>
				}
			</div>

			<div class="user-actions">
				<div class="add-users">
					<a class="add-users-button" href="/Users/Invite/@(Model.ChannelID)">Invite users</a>
				</div>

				<div class="leave-channel">
					@using (Html.BeginForm(actionName: "LeaveChannel", controllerName: "Users", method: FormMethod.Post, routeValues: new { param = Model.ChannelID }))
					{
						<input type="hidden" name="ChannelID" value="@Model.ChannelID" />
						<input type="submit" value="Leave Channel" class="leave-channel-button" />
					}
				</div>
			</div>
		</div>
	</div>
</div>